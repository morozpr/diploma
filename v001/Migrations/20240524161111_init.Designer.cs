// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using v001.Models;

#nullable disable

namespace v001.Migrations
{
    [DbContext(typeof(DiplomaDbContext))]
    [Migration("20240524161111_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("v001.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("BookID");

                    b.Property<Guid>("BookStatusTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("BookStatusTypeID");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("OrderID");

                    b.HasKey("BookId")
                        .HasName("Book_pkey");

                    b.HasIndex("BookStatusTypeId");

                    b.HasIndex("OrderId");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("v001.Models.BookStatusType", b =>
                {
                    b.Property<Guid>("BookStatusTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("BookStatusTypeID");

                    b.Property<string>("BookStatusTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("BookStatusTypeId")
                        .HasName("BookStatusType_pkey");

                    b.ToTable("BookStatusType", (string)null);
                });

            modelBuilder.Entity("v001.Models.Cost", b =>
                {
                    b.Property<Guid>("CostId")
                        .HasColumnType("uuid")
                        .HasColumnName("CostID");

                    b.Property<int>("CostValue")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DateSet")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateUnset")
                        .HasColumnType("date");

                    b.HasKey("CostId")
                        .HasName("Cost_pkey");

                    b.ToTable("Cost", (string)null);
                });

            modelBuilder.Entity("v001.Models.Discount", b =>
                {
                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid")
                        .HasColumnName("DiscountID");

                    b.Property<DateOnly>("DateSet")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateUnset")
                        .HasColumnType("date");

                    b.Property<int>("DiscountValue")
                        .HasColumnType("integer");

                    b.HasKey("DiscountId")
                        .HasName("Discount_pkey");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("v001.Models.Guest", b =>
                {
                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("GuestID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("GuestId")
                        .HasName("Guest_pkey");

                    b.ToTable("Guest", (string)null);
                });

            modelBuilder.Entity("v001.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("OrderID");

                    b.Property<DateOnly>("BookDateFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly>("BookDateTo")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("BookTimeFrom")
                        .HasPrecision(6)
                        .HasColumnType("time(6) without time zone");

                    b.Property<TimeOnly>("BookTimeTo")
                        .HasPrecision(6)
                        .HasColumnType("time(6) without time zone");

                    b.Property<Guid>("CostId")
                        .HasColumnType("uuid")
                        .HasColumnName("CostID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid")
                        .HasColumnName("DiscountID");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("GuestID");

                    b.Property<bool>("HasCar")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("OrderStatusID");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoomID");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid")
                        .HasColumnName("TariffID");

                    b.HasKey("OrderId")
                        .HasName("Order_pkey");

                    b.HasIndex("CostId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("GuestId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TariffId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("v001.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("OrderStatusID");

                    b.Property<string>("OrderStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("OrderStatusId")
                        .HasName("OrderStatus_pkey");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("v001.Models.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoomID");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoomTypeID");

                    b.HasKey("RoomId")
                        .HasName("Room_pkey");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("v001.Models.RoomType", b =>
                {
                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoomTypeID");

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoomTypeId")
                        .HasName("RoomType_pkey");

                    b.ToTable("RoomType", (string)null);
                });

            modelBuilder.Entity("v001.Models.Tariff", b =>
                {
                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid")
                        .HasColumnName("TariffID");

                    b.Property<DateOnly>("DateSet")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateUnset")
                        .HasColumnType("date");

                    b.Property<string>("TariffName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TariffId")
                        .HasName("Tariff_pkey");

                    b.ToTable("Tariff", (string)null);
                });

            modelBuilder.Entity("v001.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("v001.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("v001.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("v001.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("v001.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("v001.Models.Book", b =>
                {
                    b.HasOne("v001.Models.BookStatusType", "BookStatusType")
                        .WithMany("Books")
                        .HasForeignKey("BookStatusTypeId")
                        .IsRequired()
                        .HasConstraintName("BookStatusTypeID");

                    b.HasOne("v001.Models.Order", "Order")
                        .WithMany("Books")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("OrderID");

                    b.Navigation("BookStatusType");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("v001.Models.Order", b =>
                {
                    b.HasOne("v001.Models.Cost", "Cost")
                        .WithMany("Orders")
                        .HasForeignKey("CostId")
                        .IsRequired()
                        .HasConstraintName("CostID");

                    b.HasOne("v001.Models.Discount", "Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("DiscountID");

                    b.HasOne("v001.Models.Guest", "Guest")
                        .WithMany("Orders")
                        .HasForeignKey("GuestId")
                        .IsRequired()
                        .HasConstraintName("GuestID");

                    b.HasOne("v001.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("OrderStatusID");

                    b.HasOne("v001.Models.Room", "Room")
                        .WithMany("Orders")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("RoomID");

                    b.HasOne("v001.Models.Tariff", "Tariff")
                        .WithMany("Orders")
                        .HasForeignKey("TariffId")
                        .IsRequired()
                        .HasConstraintName("TariffID");

                    b.Navigation("Cost");

                    b.Navigation("Discount");

                    b.Navigation("Guest");

                    b.Navigation("OrderStatus");

                    b.Navigation("Room");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("v001.Models.Room", b =>
                {
                    b.HasOne("v001.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .IsRequired()
                        .HasConstraintName("RoomTypeID");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("v001.Models.BookStatusType", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("v001.Models.Cost", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("v001.Models.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("v001.Models.Guest", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("v001.Models.Order", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("v001.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("v001.Models.Room", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("v001.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("v001.Models.Tariff", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
